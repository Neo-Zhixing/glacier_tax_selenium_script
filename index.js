// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')
const csvParse = require('csv-parse')
const fs = require('fs')


function parseTaxDoc(path) {
  const parser = fs
  .createReadStream(path)
  .pipe(csvParse({
    columns: true
  }))
  return parser
}

async function main() {
  const path = process.argv[2]
  console.log(`Reading csv from ${path}`)

  let driver = await new Builder().forBrowser('chrome').build()
  await driver.manage().setTimeouts( { implicit: 10000 } )
  try {
    await driver.get("https://www.online-tax.net/glogin.asp")
    await driver.manage().window().setRect(1920, 1080)
    await driver.findElement(By.id("txtUserID")).sendKeys("zhan3088")
    await driver.findElement(By.name("txtPassword")).sendKeys("pWx0KR3L")
    await driver.findElement(By.name("txtPassword")).sendKeys(Key.ENTER)
    await driver.findElement(By.name("submitAccept")).click()
    await driver.findElement(By.id("r9")).click()
    await driver.findElement(By.name("submitNext")).click()
    await driver.findElement(By.name("radInfoCorrectYN")).click()
    await driver.findElement(By.name("submitNext")).click()
    await driver.findElement(By.name("submitNext")).click()
    await driver.findElement(By.id("chkACK")).click()
    await driver.findElement(By.name("submitNext")).click()
    await driver.findElement(By.linkText("Step TWO: Select and Complete Income Forms")).click()
    await driver.findElement(By.id("next-button-anchor-submit")).click()


    const parser = parseTaxDoc(path)

    for await (const record of parser) {
      // Work with each record
      console.log(record)
      const transaction = {
        name: record['Description'],
        code: record['Symbol'],
        cusip: record['CUSIP'],
        dateAcquired: record['Date Acquired'],
        dateSold: record['Date Sold'],
        grossProceeds: record['Gross Proceeds'].substring(1),
        costBasis: record['Cost or Other Basis'].substring(1),
        gain: record['Gain/(Loss)'].substring(1),
        washSaleLossDisallowed: record['Wash Sale Loss Disallowed'].substring(1),
        incomeTaxWithheld: record['Federal Income Tax Withheld'].substring(1),
        type: record['Type of Gain(Loss)'],
        noncovered: record['Noncovered Securities'],
        reportingCategory: record['Reporting Category'],
      }
      console.log(transaction)
      await driver.findElement(By.linkText("Add Transaction")).click()
      await driver.findElement(By.id("Name")).click()
      await driver.findElement(By.id("Name")).sendKeys(transaction.name)
      await driver.findElement(By.id("PurchasedDateString")).click()
      await driver.findElement(By.id("PurchasedDateString")).sendKeys(transaction.dateAcquired)
      await driver.findElement(By.id("SoldDateString")).click()
      await driver.findElement(By.id("SoldDateString")).sendKeys(transaction.dateSold)

      let salesPrice = driver.findElement(By.id("SalesPrice"))
      await driver.actions().doubleClick(salesPrice).perform()
      await salesPrice.sendKeys(transaction.grossProceeds)

      let purchasePrice = driver.findElement(By.id("PurchasePrice"))
      await driver.actions().doubleClick(purchasePrice).perform()
      await purchasePrice.sendKeys(transaction.costBasis)
      await driver.findElement(By.id("submit")).click()
    }



  } finally {
    //await driver.quit()
  }
}
main()

